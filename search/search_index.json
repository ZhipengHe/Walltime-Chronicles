{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A PBS Survival Guide","text":"<p>A guide nobody asked for, but everyone eventually needs.</p> <p>Welcome to Walltime Chronicles \u2014 a personal documentation project capturing all the weird, confusing, and occasionally infuriating challenges I have faced while using QUT's HPC systems (powered by PBS).</p> <p>If you have ever:</p> <ul> <li>Submitted a job that instantly failed for reasons only known to the cluster gods,</li> <li>Fought with <code>walltime</code> limits like you were disarming a bomb,</li> <li>Wondered why your script runs perfectly except when submitted through <code>qsub</code>,</li> <li>Or simply stared into the abyss of PBS logs...</li> </ul> <p>Then this is the right place.</p>"},{"location":"#what-youll-find-here","title":"What You'll Find Here","text":"<ul> <li> <p> Mystery Errors &amp; How I Solved Them   Real issues with real fixes (and real frustration).</p> </li> <li> <p> Tips, Workarounds, and Gotchas   Things that should have been in the official docs.</p> </li> <li> <p> PBS Scripts &amp; Snippets   Copy-paste-friendly templates with helpful comments.</p> </li> <li> <p> Experiments &amp; Mistakes   Because learning is messy.</p> </li> </ul>"},{"location":"#what-youll-not-find-here","title":"What You'll Not Find Here","text":"<ul> <li> <p> Basic Linux Tutorials   This isn't \"Linux for Dummies\". I assume you know your <code>ls</code> from your <code>rm -rf</code>.</p> </li> <li> <p> PBS 101   No \"What is PBS?\" here. If you don't know what <code>qsub</code> means, start with the official docs.</p> </li> <li> <p> Comprehensive Tutorials   This is a collection of \"Oh, that's why it failed!\" moments, not a step-by-step guide to HPC mastery.</p> </li> <li> <p> System Administration   I'm not your sysadmin. If you need to configure the cluster, that's above my pay grade.</p> </li> <li> <p> Debugging Your Code   Your Python script is throwing errors? That's between you and your debugger. I'm here for PBS-related mysteries only.</p> </li> <li> <p> Performance Optimisation   Want to make your code run faster? I'll share some tricks that might work, but no promises. This isn't a magic wand for your algorithms, just some PBS-specific tweaks that occasionally make things less slow.</p> </li> </ul>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>Before you start</p> <p>Before you start using this guide, please read the QUT HPC \"Aqua\" Official Documentation<sup>1</sup> and Altair's PBS Pro Documentation thoroughly.</p> <p>This is not an official QUT HPC \"Aqua\" guide. It is just my (occasionally ranty) collection of notes, meant to help others avoid the black holes I fell into. Use at your own risk \u2014 and sanity.</p> <p>Happy queueing, and may your jobs always run on the first try.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you have any suggestions or corrections, please feel free to open an issue or a pull request on GitHub.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p> <ol> <li> <p>Access only in QUT network. Please use VPN to access the documentation when off-campus.\u00a0\u21a9</p> </li> </ol>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025 Zhipeng He</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"pbs-scripts/Batch-Cooking-PBS-Scripts-with-a-Bash-Pan/","title":"Batch-Cooking PBS Scripts with a Bash Pan","text":"<p>This is a work in progress</p> <p>Right now, this page is a work in progress. Only an example bash file is provided. I will update this page with more details soon.</p>"},{"location":"pbs-scripts/Batch-Cooking-PBS-Scripts-with-a-Bash-Pan/#example-bash-pan","title":"Example Bash Pan","text":"<pre><code>#!/bin/bash\n\n# Author: Zhipeng He\n# Email: zhipeng.he@hdr.qut.edu.au\n\n# List of experiments to run\n# Add or remove experiments by modifying this array\nEXPERIMENTS=(\n    \"exp_script/Example_Experiment_0.sh\"\n    \"exp_script/Example_Experiment_1.sh\"\n    \"exp_script/Example_Experiment_2.sh\"\n)\n\n# Create a unique timestamp once\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nJOB_NAME=\"tslib_${TIMESTAMP}\"\nPBS_SCRIPT=\"submit_job_${TIMESTAMP}.pbs\"\n\n# Create PBS script\ncat &gt; ${PBS_SCRIPT} &lt;&lt; EOF\n#!/bin/bash\n#PBS -N ${JOB_NAME}\n#PBS -l select=1:ncpus=8:ngpus=1:mem=64GB:gpu_id=H100\n#PBS -M $USER@qut.edu.au\n#PBS -l walltime=48:00:00\n#PBS -q gpuq\n#PBS -j oe\n#PBS -m abe\n#PBS -o ${JOB_NAME}_output.log\n\n# Set paths\nWORK_DIR=\\${PBS_O_WORKDIR}\nDATASET_DIR=\\${WORK_DIR}/dataset\n\ncd \\${PBS_O_WORKDIR}\n\nmodule load GCCcore/13.3.0\nmodule load Python/3.12.3\nmodule load libffi/3.4.5\nmodule load CUDA/11.8.0\n\npython -m venv env\nsource env/bin/activate\npython -m pip install -r requirements.txt\n\n# Run experiments\ncd \\${WORK_DIR}\nEOF\n\n# Add each experiment to the PBS script\nfor exp in \"${EXPERIMENTS[@]}\"; do\n    # Add a section header for each experiment\n    echo \"echo '=============================================='\" &gt;&gt; ${PBS_SCRIPT}\n    echo \"echo 'Running experiment: ${exp}'\" &gt;&gt; ${PBS_SCRIPT}\n    echo \"echo '=============================================='\" &gt;&gt; ${PBS_SCRIPT}\n\n    # Add the experiment command (run directly)\n    echo \"bash \\${WORK_DIR}/scripts/${exp}\" &gt;&gt; ${PBS_SCRIPT}\n\n    # Add a separator between experiments\n    echo \"echo ''\" &gt;&gt; ${PBS_SCRIPT}\n    echo \"echo '=============================================='\" &gt;&gt; ${PBS_SCRIPT}\n    echo \"echo ''\" &gt;&gt; ${PBS_SCRIPT}\ndone\n\n# Make the PBS script executable\nchmod +x ${PBS_SCRIPT}\n\n# Submit the job\nqsub ${PBS_SCRIPT}\n\necho \"Job submitted with name: ${JOB_NAME}\"\necho \"You can monitor the job using: qstat -u \\$USER\"\necho \"Output will be saved in: ${JOB_NAME}_output.log\" \n</code></pre>"},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/","title":"Surviving without VS Code Remote SSH","text":"<p>\"Or: \"They took away my extension, but not my will to code.\"\"</p> <p>VS Code Remote SSH is banned</p> <p>QUT Aqua banned VS Code Remote SSH extension due to potential high workload on the node. Even you try to connect to Aqua through Remote SSH, it will be disconnected automatically after around 30 seconds. Check this for more details.</p> <p>So... you're trying to develop on QUT Aqua, but the server gods have other plans. Maybe you can't use VS Code Remote SSH. Maybe you're just feeling adventurous. But do not worry \u2014 you can still edit remote files and develop like a champ. Here's how I've kept my sanity while developing on remote HPC systems.</p> Before you start: Recommend to add a shortcut to <code>~/.ssh/config</code> <p>If you are using SSH keys to connect to the HPC, you can add a shortcut to <code>~/.ssh/config</code> to make your life easier. QUT Aqua documentation provides a guide on how to set up SSH keys for passwordless login.</p> <p><pre><code># Add to your ~/.ssh/config\nHost aqua\n    HostName aqua.qut.edu.au\n    User your-username\n    IdentityFile ~/.ssh/id_rsa_aqua # Add your SSH key here\n    ServerAliveInterval 60\n</code></pre> Then, you can connect to the HPC by running <code>ssh aqua</code>. Also, you can use <code>aqua</code> to replace <code>your-username@aqua.qut.edu.au</code> in the following commands.</p>"},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#1-fake-it-with-ssh-mounted-folders","title":"1. Fake it with SSH-mounted folders","text":""},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#option-a-mount-via-finder-the-cheese-board-approach","title":"Option A: Mount via Finder \u2014 the cheese board approach","text":"<p>Here's a quick guide for macOS users. Please refer to the official documentation for other OS.</p> <ol> <li>Open Finder \u2192 <code>Go</code> \u2192 <code>Connect to Server...</code></li> <li>Enter:</li> </ol> <p><pre><code>smb://hpc-fs/home/\n</code></pre> 3. Mount it, then open the folder in VS Code like it's 1999.</p> <p> Note: You can edit files, but no shell, no Git, and no terminal tantrums. It's like eating cake without the frosting.</p>"},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#but-is-this-method-elegant","title":"But ... is this method elegant?","text":"<p>You've mounted an SMB share to your Finder. Congratulations! You've just volunteered for the following comedy of errors:</p> <ol> <li>Git? More like \"Get Lost\" - Your carefully crafted version control system now has all the functionality of a chocolate teapot. Want to commit changes? Sorry, Git is too sophisticated for your peasant SMB connection. It's like bringing a quantum physicist to a kindergarten counting class.</li> <li>VS Code's Terminal: The Phantom Feature - That beautiful integrated terminal in VS Code? It now stares at you like a confused puppy. <code>Command not found</code> becomes your new error mantra. It's there... but also not there, like your motivation on Monday mornings.</li> <li>The Mysterious Disconnection - Nothing says \"surprise vacation\" like your SMB connection randomly dropping when you're in the middle of important work. It's like having a co-worker who pulls the fire alarm whenever they're bored.</li> <li>HPC Disruption: The Digital Hostage Situation - Ah, you've put ALL your files on the server! So when the High-Performance Computing cluster decides to have its quarterly existential crisis (or weekly, who's counting?), your work becomes as accessible as your childhood memories. Your options? Make coffee, stare wistfully out the window.</li> <li>The .DS_Store Epidemic: Exclusive for macOS - Ah, macOS and its infamous <code>.DS_Store</code> files! Your Mac scatters these digital breadcrumbs in every folder you visit like an overzealous tourist taking selfies at landmarks. The HPC server, meanwhile, treats them with the same enthusiasm as finding glitter in its keyboard \u2013 \"Thanks for the desktop settings I absolutely didn't ask for and can't use!\" </li> </ol> For macOS users only: How to fix the .DS_Store and ._* files issue <p> </p> <p>Check out The .DS_Store Strikes Back: Finder Edition about why this is a problem and how to solve it (or not).</p>"},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#option-b-sshfs-mount-through-ssh-wizardry","title":"Option B: SSHFS \u2014 Mount through SSH Wizardry","text":"<p>Mount your HPC home directory directly via SSH, no Finder fluff. It's like having your HPC filesystem in your pocket.</p>"},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#for-macos-users","title":"For macOS Users:","text":"<pre><code># Install the prerequisites (because your Mac doesn't come with everything, despite what Apple claims)\nbrew install macfuse\nbrew install gromgit/fuse/sshfs-mac\n\n# Mount your HPC home (1)\nmkdir ~/aqua\nsshfs your-username@aqua.qut.edu.au:/home/your-username ~/aqua #(2)\n\n# When you're done pretending these files are local\numount ~/aqua\n# Or if that fails spectacularly (as technology loves to do)\ndiskutil unmount ~/aqua\n</code></pre> <ol> <li>When you're running <code>sshfs</code> first time, you will be asked to go to \"System Preferences\" \u2192 \"Security &amp; Privacy\" \u2192 \"Security\" \u2192 click \"Allow\" for running the app. Then you also need to restart your Mac.</li> <li>You can use <code>aqua</code> to replace <code>your-username@aqua.qut.edu.au</code> if you have added a shortcut to <code>~/.ssh/config</code>.</li> </ol>"},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#for-linux-users-ubuntu","title":"For Linux Users (Ubuntu):","text":"<pre><code># Install SSHFS (because of course Linux makes you work for everything)\nsudo apt install sshfs\n\n# Mount your HPC home, telling the laws of physics to take a break\nmkdir -p ~/aqua\nsshfs your-username@aqua.qut.edu.au:/home/your-username ~/aqua -o follow_symlinks\n\n# To send these files back to their natural habitat\nfusermount -u ~/aqua\n</code></pre>"},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#for-windows-users","title":"For Windows Users:","text":"<p>Install WinFSP and SSHFS-Win, because Windows needs two separate things to do what other systems accomplish with one. Then use Windows Explorer (which Microsoft keeps renaming as if that will make us forget its bugs) to map a network drive:</p> <p><pre><code>\\\\sshfs\\your-username@aqua.qut.edu.au\n</code></pre> Then open it in VS Code like you've just performed a miracle:</p> <pre><code>code ~/aqua\n</code></pre> <p> Pro:  - Looks local. Feels local. - Git operations work... until they mysteriously don't</p> <p> Con:  - Feels too local for large files. Might lag. - If the connection drops, your filesystem freezes like it's seen a ghost</p> Performance Tips That Might Help (No Promises) <ul> <li>Use <code>-o cache=yes</code> to create the illusion of performance (side effects may include file synchronization existential crises)</li> <li>Add <code>-o compression=yes</code> to squeeze your data through the internet tubes more efficiently</li> <li>If everything hangs, adjust your <code>ServerAlive</code> settings, which is like giving your connection a gentle nudge every few minutes to check if it's still breathing</li> </ul> Working with Git Over SSHFS: A Tragicomedy <p>When using Git over SSHFS, you're essentially asking Git to perform a synchronized swimming routine while blindfolded. For anything more complex than a simple commit, consider SSH-ing directly into the server and running Git commands there. Your future self will thank you for not testing the limits of your patience.</p> For macOS users only: Still cannot get rid of the .DS_Store and ._* files? <p> </p> <p>Check out The .DS_Store Strikes Back: Finder Edition about why this is a problem and how to solve it (or not).</p>"},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#2-rsync-scp-and-git-your-old-school-sync-buddies","title":"2. <code>rsync</code>, <code>scp</code> and <code>git</code>: Your old-school sync buddies","text":""},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#option-a-rsync-scp-the-reliable-workhorse","title":"Option A: <code>rsync</code> &amp; <code>scp</code> \u2014 The Reliable Workhorse","text":"<pre><code># Sync your local code to HPC\nrsync -avz ./my-project/ your-username@aqua.qut.edu.au:/home/your-username/projects/\n\n# Sync back from HPC\nrsync -avz your-username@aqua.qut.edu.au:/home/your-username/projects/ ./my-project/\n</code></pre> <p>Or for a quick one-file fling:</p> <pre><code>scp script.py your-username@aqua.qut.edu.au:/home/your-username/projects/\n</code></pre> <p>It's not fancy, but it works \u2014 like duct tape.</p>"},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#option-b-git-the-version-control-way","title":"Option B: Git \u2014 The Version Control Way","text":"<p>If you are version-controlling your life (as you should), Git is a clean and reliable method.</p> <pre><code># On your local machine\ngit init\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add aqua your-username@aqua.qut.edu.au:/path/to/repo\ngit push aqua main\n\n# On the HPC\ngit clone your-username@aqua.qut.edu.au:/path/to/repo\n</code></pre> <p> Pro: Clean history, branch control, reproducibility</p> <p> Con: Needs initial setup and your SSH keys must behave</p>"},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#3-the-terminal-only-approach","title":"3. The Terminal-Only Approach","text":"<p>When all else fails, embrace the terminal:</p> <pre><code>ssh your-username@aqua.qut.edu.au\n</code></pre> <p>Then pick your weapon of choice:</p> <ul> <li><code>vim</code> \u2014 For the brave</li> <li><code>nano</code> \u2014 For the sane</li> <li><code>neovim</code> \u2014 For the modern</li> <li><code>emacs</code> \u2014 For the... unique</li> </ul> <p> Bonus: Fast, keyboard-driven, and doesn't require GUI permission forms.</p> <p>Note: I will write another page about how to use <code>neovim</code> and its plugins to replace VS Code as a lightweight editor (with SSH).</p>"},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#4-the-web-based-approach","title":"4. The Web-Based Approach","text":""},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#option-a-jupyter-notebooks","title":"Option A: Jupyter Notebooks","text":"<p>Install Jupyter Lab in HPC before you start</p> <p>The official Aqua documentation provides a guide on how to install Miniconda in HPC.</p> <pre><code># On the HPC\n# I prefer to use Jupyter Lab instead of Jupyter Notebook\njupyter lab --no-browser --port=8888 # (1)\n\n# On your local machine, forward the port 8888 to your local machine\n# local_port:localhost:remote_port (2)\nssh -N -L 8888:localhost:8888 your-username@aqua.qut.edu.au\n</code></pre> <ol> <li>If port 8888 is already in use, you can try another port, e.g. 8889.</li> <li><code>-N</code> means no command to run on the remote machine. <code>-L</code> means forward the local port to the remote port. Both local and remote ports are 8888 in this case.</li> </ol>"},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#option-b-vs-code-in-browser","title":"Option B: VS Code in Browser","text":"<p> Warning: This might require a sysadmin's blessing! Fortunately, the server gods haven't locked everything down:</p> <ol> <li>Install <code>code-server</code> on the HPC. <pre><code># On HPC server\n# Install code-server to your home directory\ncurl -fsSL https://code-server.dev/install.sh | sh -s -- --method standalone --prefix=$HOME\n# code-server will be installed to $HOME/bin/code-server\n\n# check if code-server is installed\ncode-server --version\n\n# Start code-server\ncode-server  --bind-addr 127.0.0.1:8080 --disable-telemetry --disable-update-check --auth none\n\n# On your local machine\n# Forward the port 8080 to your local machine\nssh -N -L 8080:127.0.0.1:8080 your-username@aqua.qut.edu.au\n</code></pre></li> <li>Open it in your browser <pre><code># Open the web page in your browser\nhttp://localhost:8080\n</code></pre></li> <li>Marvel as VS Code rises from the ashes \u2014 web-style</li> </ol> Sync VS Code settings to code-server <p>You can import your VS Code settings to code-server by importing the profile from VS Code. Check out this page for more details about how to export and import profiles. However, this's not the perfect solution. Not all VS Code extensions are available for code-server, some extensions are restricted for Microsoft VS Code. Only the extensions that are available for code-server are listed in Open VSX Registry.</p> Run code-server in the background with <code>tmux</code> <p>You can run code-server in the background with <code>tmux</code> to avoid the session being killed after you disconnect from the HPC.</p> <pre><code># Start a new tmux session\ntmux new -s code\n\n# Run code-server in the background\ncode-server --bind-addr 127.0.0.1:8080 --disable-telemetry --disable-update-check --auth none\n\n# Detach from the tmux session: `Ctrl+b`, then `d`\n\n# Reattach to the tmux session\ntmux attach -t code\n\n# Kill the tmux session\ntmux kill-session -t code\n\n# If you forget the session name, you can list all sessions\ntmux ls\n</code></pre> Known issue on Integrated Terminal and Extension Host <p>I found that the terminal and the extension host are not stable when using code-server. The issue seems to revolve around the ptyHost, File Watcher, and Extension Host, and it's being repeatedly killed by SIGTERM.</p> <p> What Is Happening?</p> <pre><code>[12:18:01] ptyHost terminated unexpectedly with code null\n[12:18:01] [File Watcher (universal)] restarting watcher after unexpected error: terminated by itself with code null, signal: SIGTERM (ETERM)\n[12:18:01] [127.0.0.1][d0f383fd][ExtensionHostConnection] &lt;3126357&gt; Extension Host Process exited with code: null, signal: SIGTERM.\n[12:18:02] [127.0.0.1][d0f383fd][ExtensionHostConnection] Unknown reconnection token (seen before).\n[12:18:02] [127.0.0.1][368c67ad][ExtensionHostConnection] New connection established.\n[12:18:02] [127.0.0.1][368c67ad][ExtensionHostConnection] &lt;3132486&gt; Launched Extension Host Process.\n</code></pre> <p>From the logs:</p> <ul> <li> The <code>ptyHost</code> process (responsible for terminal sessions) crashed or was killed \u2014 possibly due to system resource limits or policy.</li> <li> File watcher was forcefully killed (SIGTERM) \u2014 system or job policy likely did this.</li> <li> Extension host was also killed \u2014 same reason, likely tied to HPC rules.</li> <li> code-server tried to reconnect to the crashed extension host but failed.</li> <li> code-server restarted the extension host process automatically.</li> </ul>"},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#tldr-what-works-and-what-requires-sacrifice","title":"TL;DR \u2014 What Works (and What Requires Sacrifice)","text":"Method  Edit in VS Code  Terminal Access  Where Files Live  GUI Needed  Vibe Check SMB (Finder)  Yes, like it's local  Nope, just files  Remote (mounted)  Yes  \"Cheesy but it works\" SSHFS  Yes (mostly)  Not really  Remote (mounted)  Nope  \"Kinda slow, kinda cool\" rsync / Git  Edit local, sync later  Full control  Local (then synced)  Nope  \"Old school, solid\" Terminal Editors  No GUI, no problem  Born in the terminal  Remote (SSH only)  Nope  \"For shell warriors\" Jupyter  Yes, via browser  If allowed  Remote (Jupyter workspace)  Yes  \"Science with style\" code-server  Yes, but web-based  Unstable  Remote (in browser)  Yes  \"Feels like cheating\""},{"location":"remote-dev/Surviving-without-VS-Code-Remote-SSH/#final-words","title":"Final Words","text":"<p>Remote development on HPC doesn't have to be a pain. Pick your poison, set up your workflow, and remember: the best development environment is the one that doesn't make you want to throw your computer out the window.</p> <p>Happy coding, and may your HPC connections be stable! \ud83d\ude80</p>"},{"location":"remote-dev/The-DS_Store-Strikes-Back/","title":"The .DS_Store Strikes Back: Finder Edition","text":"<p>A long time ago, on a remote server far, far away...</p>"},{"location":"remote-dev/The-DS_Store-Strikes-Back/#episode-v-the-ds_store-strikes-back","title":"EPISODE V: THE .DS_STORE STRIKES BACK","text":"<p>The Dark Side of macOS</p> <p>Imperial .DS_Store files have driven Rebel developers from their remote server folders. These hidden files spread like the Dark Side across every folder you visit.</p> <ul> <li> <p>Darth <code>.DS_Store</code>: \"Your lack of <code>defaults write</code> is disturbing. My hidden files will spread across every folder you visit.\"</p> </li> <li> <p>Luke: \"But I've tried <code>.gitignore</code>! It has no power here on remote connections!\"</p> </li> <li> <p>Yoda: \"Use the Terminal, Luke. Or the sacred command to disable .DS_Store on network volumes.\"</p> </li> <li> <p>Han: \"I've been running from these hidden files for ten years. Not a remote server is safe in the galaxy!\"</p> </li> </ul>"},{"location":"remote-dev/The-DS_Store-Strikes-Back/#the-solution-clean-up-the-dark-side","title":"The Solution: Clean Up the Dark Side","text":"<ol> <li> <p>Remove Existing .DS_Store Files <pre><code># Clean up all .DS_Store files\nfind . -name \".DS_Store\" -delete\n</code></pre></p> </li> <li> <p>Prevent Future .DS_Store Creation <pre><code># Disable .DS_Store on network volumes\ndefaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE\n\n# Restart Finder to apply changes\nkillall Finder\n</code></pre></p> </li> </ol>"},{"location":"remote-dev/The-DS_Store-Strikes-Back/#episode-vi-the-return-of-the-metadata-_","title":"EPISODE VI: THE RETURN OF THE METADATA (._*)","text":"<p>\"The ._* files are back, and they're more annoying than ever.\"</p> <p>The Hidden Menace</p> <p>When you copy files to a remote server, macOS creates mysterious <code>._*</code> files. They're like the Ewoks of the file system - small, seemingly harmless, but they can cause big problems.</p> <ul> <li> <p>Darth Metadata: \"Your files are not complete without my metadata. I will follow them everywhere.\"</p> </li> <li> <p>Luke: \"But these <code>._*</code> files are causing issues with my Python scripts!\"</p> </li> <li> <p>Yoda: \"Hidden they are, but dangerous they can be. Clean them you must.\"</p> </li> </ul>"},{"location":"remote-dev/The-DS_Store-Strikes-Back/#the-solution-defeat-the-metadata-menace","title":"The Solution: Defeat the Metadata Menace","text":"<ol> <li> <p>Remove Existing Metadata Files <pre><code># Remove all ._ files\nfind . -name \"._*\" -delete\n\n# Or clean both .DS_Store and ._ files\nfind . -type f -name \"._*\" -o -name \".DS_Store\" -delete\n</code></pre></p> </li> <li> <p>Understanding the ._* Files - The Unstoppable Force</p> <p>On macOS, preventing the creation of <code>._*</code> files (AppleDouble metadata) entirely is not officially supported\u2014especially on non-HFS+ or non-APFS volumes.</p> <p>Why ._* files are created: macOS uses ._* AppleDouble files to store:</p> <pre><code>- Resource forks\n- Extended attributes (e.g., custom icons, tags)\n- Finder metadata\n\nThese are automatically created when copying files to filesystems that don't support extended attributes, such as:\n- SMB shares (Linux Samba servers)\n- FAT, exFAT, NTFS drives\n- Some WebDAV volumes\n</code></pre> </li> <li> <p>Best Available Solutions </p> <p>Just kidding, there are no best available solutions for this problem. That's why I said mount the remote server as a local drive by Finder is not an elegant solution.</p> </li> <li> <p>For Git Users</p> <p>Add the following to your .gitignore file: <pre><code># Add to your .gitignore (won't prevent creation, but prevents tracking)\necho \"._*\\n.DS_Store\" &gt;&gt; .gitignore\n</code></pre></p> </li> </ol>"},{"location":"remote-dev/The-DS_Store-Strikes-Back/#final-words","title":"Final Words","text":"<p>\"The Force is strong with clean file systems.\"</p> <p>May your remote development be free of metadata files, and may the Force be with you! \ud83d\ude80 </p>"}]}